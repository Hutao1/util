{"version":3,"file":"js/327.b690e8f2.js","mappings":"kKAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,QAAQ,CAACF,EAAG,MAAM,CAACE,YAAY,eAAe,CAACJ,EAAIK,GAAG,aAAaH,EAAG,UAAU,CAACI,IAAI,OAAOC,MAAM,CAAC,MAAQP,EAAIQ,KAAK,cAAc,SAAS,CAACN,EAAG,eAAe,CAACK,MAAM,CAAC,MAAQ,SAAS,CAACL,EAAG,WAAW,CAACK,MAAM,CAAC,KAAO,WAAW,SAAW,CAAEE,QAAS,GAAI,YAAc,eAAeC,MAAM,CAACC,MAAOX,EAAIY,KAAMC,SAAS,SAAUC,GAAMd,EAAIY,KAAKE,CAAG,EAAEC,WAAW,WAAW,IAAI,GAAGb,EAAG,YAAY,CAACK,MAAM,CAAC,KAAO,UAAU,QAAUP,EAAIgB,cAAcC,GAAG,CAAC,MAAQjB,EAAIkB,SAAS,CAAClB,EAAIK,GAAG,QAAQH,EAAG,MAAM,CAACiB,YAAY,CAAC,QAAU,SAAS,CAACjB,EAAG,cAAc,CAACK,MAAM,CAAC,KAAOP,EAAIoB,QAAQC,OAAO,SAAW,GAAG,QAAUrB,EAAIgB,gBAAgBd,EAAG,MAAM,CAACoB,SAAS,CAAC,UAAYtB,EAAIuB,GAAGvB,EAAIwB,YAAY,IAAI,EAC9vB,EACIC,EAAkB,GCmBtB,GACAC,IAAAA,GACA,OACAd,KAAA,GACAQ,QAAA,GACAI,OAAA,GACAhB,KAAA,GACAQ,cAAA,EAEA,EACAW,OAAAA,GACA,EAEAC,QAAA,CACAC,OAAAA,CAAAjB,GACA,KAAAQ,QAAAR,EAAAkB,MAAA,KACA,KAAAd,cAAA,EACA,KAAAe,OAAAC,KAAA,wCAEApB,KAAA,KAAAQ,QAAAa,KAAA,KAEAC,QAAA,wCAEAC,SAAA,KAEAC,OAAA,OACAC,MAAAC,IAGA,GAFA,KAAAtB,cAAA,EACAuB,QAAAC,IAAAF,EAAAZ,MACA,IAAAY,EAAAZ,KAAAe,KAAA,CACA,MAAAC,EAAAJ,EAAAZ,KAAAA,KAAAiB,IAAAC,QAAA,YAAAA,QAAA,SAAAd,MAAA,KACAe,EAAAH,EAAAI,KAAAC,IACA,MAAAC,EAAAD,EAAAE,OAAAnB,MAAA,OACAoB,EAAAF,EAAAF,KAAA,CAAAK,EAAAC,IACA,IAAAA,EAEAD,EAAAE,cAGAF,EAAAG,OAAA,GAAAC,cAAAJ,EAAAK,MAAA,GAAAH,gBAGA,OAAAH,EAAAjB,KAAA,OAEAM,QAAAC,IAAAK,GAEA,MAAAY,EAAAZ,EACAN,QAAAC,IAAAiB,GACAlB,QAAAC,IAAA,KAAApB,SACA,IAAAsC,EAAA,IACA,QAAAC,EAAA,EAAAA,EAAAF,EAAApC,OAAAsC,IACAA,EAAAF,EAAApC,OAAA,EACAqC,GAAA,aAAAD,EAAAE,GAAA,oBAAAvC,QAAAuC,IAEAD,GAAA,aAAAD,EAAAE,GAAA,mBAAAvC,QAAAuC,GACAD,GAAA,UAGA,KAAAlC,OAAAkC,CACA,IAEA,EACAxC,MAAAA,GACA,KAAA0C,cAAA,KAAAhD,KACA,EAEAgD,aAAAA,CAAAhD,GACA,KAAAA,KAAAA,EAAAqC,OAAAL,QAAA,YACA,KAAAf,QAAA,KAAAjB,KACA,IC1F6P,I,UCQzPiD,GAAY,OACd,EACA9D,EACA0B,GACA,EACA,KACA,WACA,MAIF,EAAeoC,EAAiB,O","sources":["webpack://utilproject/./src/views/ChinnesetoJson.vue","webpack://utilproject/src/views/ChinnesetoJson.vue","webpack://utilproject/./src/views/ChinnesetoJson.vue?5f41","webpack://utilproject/./src/views/ChinnesetoJson.vue?b89b"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"main\"},[_c('div',{staticClass:\"headerTitle\"},[_vm._v(\"中文转json\")]),_c('el-form',{ref:\"form\",attrs:{\"model\":_vm.form,\"label-width\":\"80px\"}},[_c('el-form-item',{attrs:{\"label\":\"转换内容\"}},[_c('el-input',{attrs:{\"type\":\"textarea\",\"autosize\":{ minRows: 5 },\"placeholder\":\"请输入内容，以空格分隔\"},model:{value:(_vm.text),callback:function ($$v) {_vm.text=$$v},expression:\"text\"}})],1)],1),_c('el-button',{attrs:{\"type\":\"primary\",\"loading\":_vm.skeletonShow},on:{\"click\":_vm.tojson}},[_vm._v(\"转换\")]),_c('div',{staticStyle:{\"padding\":\"50px\"}},[_c('el-skeleton',{attrs:{\"rows\":_vm.textarr.length,\"animated\":\"\",\"loading\":_vm.skeletonShow}}),_c('div',{domProps:{\"innerHTML\":_vm._s(_vm.enText)}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"main\">\r\n        <div class=\"headerTitle\">中文转json</div>\r\n        <el-form ref=\"form\" :model=\"form\" label-width=\"80px\">\r\n        <el-form-item label=\"转换内容\">\r\n            <el-input\r\n            type=\"textarea\"\r\n            :autosize='{ minRows: 5 }'\r\n            placeholder=\"请输入内容，以空格分隔\"\r\n            v-model=\"text\">\r\n            </el-input>\r\n        </el-form-item>\r\n        </el-form>\r\n        <el-button type=\"primary\" @click=\"tojson\" :loading=\"skeletonShow\">转换</el-button>\r\n        <div style=\"padding:50px\">\r\n            <el-skeleton :rows=\"textarr.length\" animated :loading=\"skeletonShow\"/>\r\n            <div v-html=\"enText\"></div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      text: '',\r\n      textarr: [],\r\n      enText: '',\r\n      form: {},\r\n      skeletonShow: false\r\n    }\r\n  },\r\n  mounted () {\r\n    // this.getData()\r\n  },\r\n  methods: {\r\n    getData (text) {\r\n      this.textarr = text.split(' ')\r\n      this.skeletonShow = true\r\n      this.$axios.post('https://luckycola.com.cn/tools/fanyi', {\r\n        // 需要被翻译的文本\r\n        text: this.textarr.join('.'),\r\n        // 唯一key官网个人中心获取\r\n        ColaKey: 'y0s9onRAJKM5E31720080111520mKssE55V7h',\r\n        // 需要被翻译的文本语言类型,ZH表示中文,EN表示英文\r\n        fromlang: 'ZH',\r\n        // 翻译出的结果文本语言类型,ZH表示中文,EN表示英文\r\n        tolang: 'EN'\r\n      }).then(res => {\r\n        this.skeletonShow = false\r\n        console.log(res.data)\r\n        if (res.data.code === 0) {\r\n          const step1 = res.data.data.dst.replace(/\\.+/g, '.').replace(/'s/, '').split('.')\r\n          const formattedParts = step1.map(part => {\r\n            const words = part.trim().split(/\\s+/)\r\n            const formattedWords = words.map((word, index) => {\r\n              if (index === 0) {\r\n                // 第一个单词首字母小写\r\n                return word.toLowerCase()\r\n              } else {\r\n                // 其余单词首字母大写\r\n                return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n              }\r\n            })\r\n            return formattedWords.join('')\r\n          })\r\n          console.log(formattedParts)\r\n          //   const newtext = res.data.data.dst.toLowerCase().replace(/\\s/g, '').replace(/'s/, '').replace(/\\.+/g, '.').split('.')\r\n          const newtext = formattedParts\r\n          console.log(newtext)\r\n          console.log(this.textarr)\r\n          let str = '{'\r\n          for (let i = 0; i < newtext.length; i++) {\r\n            if (i < newtext.length - 1) {\r\n              str += '<br/>&nbsp' + newtext[i] + ' : ' + 'null, // ' + this.textarr[i]\r\n            } else {\r\n              str += '<br/>&nbsp' + newtext[i] + ' : ' + 'null // ' + this.textarr[i]\r\n              str += '<br/>}'\r\n            }\r\n          }\r\n          this.enText = str\r\n        }\r\n      })\r\n    },\r\n    tojson () {\r\n      this.replacekongge(this.text)\r\n    },\r\n    // 多个空格替换成一个空格\r\n    replacekongge (text) {\r\n      this.text = text.trim().replace(/\\s+/g, ' ')\r\n      this.getData(this.text)\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.main{\r\n    padding: 30px;\r\n}\r\n.tojson{\r\n    // width: 200px;\r\n    // height: 80px;\r\n    // border-radius: 10px;\r\n    // font-size: 20px;\r\n    // display: flex;\r\n    // justify-content: center;\r\n    // align-items: center;\r\n\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChinnesetoJson.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChinnesetoJson.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ChinnesetoJson.vue?vue&type=template&id=2c06fd45&scoped=true\"\nimport script from \"./ChinnesetoJson.vue?vue&type=script&lang=js\"\nexport * from \"./ChinnesetoJson.vue?vue&type=script&lang=js\"\nimport style0 from \"./ChinnesetoJson.vue?vue&type=style&index=0&id=2c06fd45&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2c06fd45\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","_v","ref","attrs","form","minRows","model","value","text","callback","$$v","expression","skeletonShow","on","tojson","staticStyle","textarr","length","domProps","_s","enText","staticRenderFns","data","mounted","methods","getData","split","$axios","post","join","ColaKey","fromlang","tolang","then","res","console","log","code","step1","dst","replace","formattedParts","map","part","words","trim","formattedWords","word","index","toLowerCase","charAt","toUpperCase","slice","newtext","str","i","replacekongge","component"],"sourceRoot":""}